{
  "/Users/sateeshpenugonda/Desktop/meet/auth-server": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "file": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "bhavani",
            "app": "meet",
            "service": "auth-server",
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "eu-central-1",
              "timeout": 30,
              "environment": {
                "CLIENT_ID": "1048440440086-e433gpnelsb0kr1qq9qm581fdt41eu7c.apps.googleusercontent.com",
                "CLIENT_SECRET": "<REDACTED>",
                "CALENDAR_ID": "fullstackwebdev@careerfoundry.com"
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "GetAuthURLLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/auth-server-dev-getAuthURL"
                    }
                  },
                  "GetAccessTokenLogGroup": "<REDACTED>",
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "auth-server",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "auth-server",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAuthURLLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-central-1-5407ad46-d6b0",
                        "S3Key": "serverless/auth-server/dev/1730966687196-2024-11-07T08:04:47.196Z/auth-server.zip"
                      },
                      "Handler": "handler.getAuthURL",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "auth-server-dev-getAuthURL",
                      "MemorySize": 1024,
                      "Timeout": 30,
                      "Environment": {
                        "Variables": {
                          "CLIENT_ID": "1048440440086-e433gpnelsb0kr1qq9qm581fdt41eu7c.apps.googleusercontent.com",
                          "CLIENT_SECRET": "<REDACTED>",
                          "CALENDAR_ID": "fullstackwebdev@careerfoundry.com"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAuthURLLogGroup"
                    ]
                  },
                  "GetAccessTokenLambdaFunction": "<REDACTED>",
                  "GetAuthURLLambdaVersion9RC0funZGjhUtthQqsnp0VWN2IpooBRWjpAH4CPWHA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAuthURLLambdaFunction"
                      },
                      "CodeSha256": "MQnx3tgbe8de41osz50XY+svPkwKyymDmOCqqKE3jGU="
                    }
                  },
                  "GetAccessTokenLambdaVersionpNrPyQE3dzEI4VJveC96MYOOoRLUaoctxLN0YGDc": "<REDACTED>",
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-auth-server",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceApi": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "api",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceApiGetDashauthDashurl": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceApi"
                      },
                      "PathPart": "get-auth-url",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceApiToken": "<REDACTED>",
                  "ApiGatewayResourceApiTokenCodeVar": "<REDACTED>",
                  "ApiGatewayMethodApiGetDashauthDashurlGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceApiGetDashauthDashurl"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAuthURLLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAuthURLLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodApiTokenCodeVarGet": "<REDACTED>",
                  "ApiGatewayDeployment1730966675743": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodApiGetDashauthDashurlGet",
                      "ApiGatewayMethodApiTokenCodeVarGet"
                    ]
                  },
                  "GetAuthURLLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAuthURLLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAccessTokenLambdaPermissionApiGateway": "<REDACTED>"
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-eu-central-1-5407ad46-d6b0",
                    "Export": {
                      "Name": "sls-auth-server-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "GetAuthURLLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAuthURLLambdaVersion9RC0funZGjhUtthQqsnp0VWN2IpooBRWjpAH4CPWHA"
                    },
                    "Export": {
                      "Name": "sls-auth-server-dev-GetAuthURLLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAccessTokenLambdaFunctionQualifiedArn": "<REDACTED>",
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-auth-server-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getAuthURL": {
                "handler": "handler.getAuthURL",
                "events": [
                  {
                    "http": {
                      "path": "api/get-auth-url",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "auth-server-dev-getAuthURL",
                "package": {},
                "memory": 1024,
                "timeout": 30,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetAuthURLLambdaVersion9RC0funZGjhUtthQqsnp0VWN2IpooBRWjpAH4CPWHA"
              },
              "getAccessToken": "<REDACTED>"
            }
          },
          "configFileDirPath": "/Users/sateeshpenugonda/Desktop/meet/auth-server",
          "config": {
            "type": "file"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:file",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/sateeshpenugonda/Desktop/meet/auth-server",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "bhavani",
      "app": "meet",
      "service": "auth-server",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "eu-central-1",
        "timeout": 30,
        "environment": {
          "CLIENT_ID": "1048440440086-e433gpnelsb0kr1qq9qm581fdt41eu7c.apps.googleusercontent.com",
          "CLIENT_SECRET": "<REDACTED>",
          "CALENDAR_ID": "fullstackwebdev@careerfoundry.com"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetAuthURLLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/auth-server-dev-getAuthURL"
              }
            },
            "GetAccessTokenLogGroup": "<REDACTED>",
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "auth-server",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/auth-server-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "auth-server",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetAuthURLLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-5407ad46-d6b0",
                  "S3Key": "serverless/auth-server/dev/1730966687196-2024-11-07T08:04:47.196Z/auth-server.zip"
                },
                "Handler": "handler.getAuthURL",
                "Runtime": "nodejs20.x",
                "FunctionName": "auth-server-dev-getAuthURL",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "CLIENT_ID": "1048440440086-e433gpnelsb0kr1qq9qm581fdt41eu7c.apps.googleusercontent.com",
                    "CLIENT_SECRET": "<REDACTED>",
                    "CALENDAR_ID": "fullstackwebdev@careerfoundry.com"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAuthURLLogGroup"
              ]
            },
            "GetAccessTokenLambdaFunction": "<REDACTED>",
            "GetAuthURLLambdaVersion9RC0funZGjhUtthQqsnp0VWN2IpooBRWjpAH4CPWHA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAuthURLLambdaFunction"
                },
                "CodeSha256": "MQnx3tgbe8de41osz50XY+svPkwKyymDmOCqqKE3jGU="
              }
            },
            "GetAccessTokenLambdaVersionpNrPyQE3dzEI4VJveC96MYOOoRLUaoctxLN0YGDc": "<REDACTED>",
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-auth-server",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceApi": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "api",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiGetDashauthDashurl": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceApi"
                },
                "PathPart": "get-auth-url",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceApiToken": "<REDACTED>",
            "ApiGatewayResourceApiTokenCodeVar": "<REDACTED>",
            "ApiGatewayMethodApiGetDashauthDashurlGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceApiGetDashauthDashurl"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAuthURLLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAuthURLLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodApiTokenCodeVarGet": "<REDACTED>",
            "ApiGatewayDeployment1730966675743": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodApiGetDashauthDashurlGet",
                "ApiGatewayMethodApiTokenCodeVarGet"
              ]
            },
            "GetAuthURLLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAuthURLLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAccessTokenLambdaPermissionApiGateway": "<REDACTED>"
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-central-1-5407ad46-d6b0",
              "Export": {
                "Name": "sls-auth-server-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetAuthURLLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAuthURLLambdaVersion9RC0funZGjhUtthQqsnp0VWN2IpooBRWjpAH4CPWHA"
              },
              "Export": {
                "Name": "sls-auth-server-dev-GetAuthURLLambdaFunctionQualifiedArn"
              }
            },
            "GetAccessTokenLambdaFunctionQualifiedArn": "<REDACTED>",
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-auth-server-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getAuthURL": {
          "handler": "handler.getAuthURL",
          "events": [
            {
              "http": {
                "path": "api/get-auth-url",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "auth-server-dev-getAuthURL",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAuthURLLambdaVersion9RC0funZGjhUtthQqsnp0VWN2IpooBRWjpAH4CPWHA"
        },
        "getAccessToken": "<REDACTED>"
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: bhavani\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: meet\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\nservice: auth-server\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: eu-central-1\n  timeout: 30 # optional, in seconds, default is 6\n  environment:\n    CLIENT_ID: ${file(config.json):CLIENT_ID}\n    CLIENT_SECRET: ${file(config.json):CLIENT_SECRET}\n    CALENDAR_ID: ${file(config.json):CALENDAR_ID}\n\n\nfunctions:\n  getAuthURL:\n    handler: handler.getAuthURL\n    events:\n      - http:\n          path: api/get-auth-url\n          method: get\n\n  getAccessToken:\n    handler: handler.getAccessToken\n    events:\n      - http:\n          path: api/token/{code}\n          method: get  ",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "117e3336b5bb04b3eb702c3f501bfba3",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "3031aa58-e5f1-4c97-8e9d-ce8d6dd110b4",
    "orgName": "bhavani",
    "userId": "NHZLd6BgVSKWpLqdmW",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "QqfDQpzbQDGVC9kJDD",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "bhavani",
    "subscription": null,
    "userEmail": "bhavani0202@gmail.com",
    "serviceProviderAwsRegion": "eu-central-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "124355639642",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "auth-server-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-central-1:124355639642:stack/auth-server-dev/968e6ef0-9c48-11ef-83c8-0a168878a029",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:124355639642:stack/auth-server-dev/968e6ef0-9c48-11ef-83c8-0a168878a029",
    "serviceProviderAwsCfStackCreated": "2024-11-06T14:08:25.296Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-06T15:17:49.033Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetAccessTokenLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:124355639642:function:auth-server-dev-getAccessToken:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-auth-server-dev-GetAccessTokenLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAuthURLLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:124355639642:function:auth-server-dev-getAuthURL:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-auth-server-dev-GetAuthURLLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://aq5hixsugj.execute-api.eu-central-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-auth-server-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-central-1-5407ad46-d6b0",
        "ExportName": "sls-auth-server-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}